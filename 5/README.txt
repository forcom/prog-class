［課題番号］5
［学籍番号］24115172
［氏名］Yoon SeungYong
［添付ファイル等の説明］
5B.c : 条件を満たす全ての数を探すプログラム
［プログラムの説明］
gitパブリックレポジトリ
https://github.com/forcom/prog-class.git

問題
123456789の間に＋,−,×を入れて100を作りなさい。
また全ての場合を出力しなさい。

このプログラムはこの問題を解くプログラムである。
コンパイルは標準Ｃ言語のコンパイラーでコンパイルすればよい。
［考察］
この問題は大きく３つの問題で分けて考えられる。
１．１から９を用いて定数項を作ること。
２．作った定数項の間に演算子を入れること。
３．演算の優先順位を考えて演算を行うこと。

１と２は再帰関数を用いて解決した。
詳しく言うと木の子ノードを定数項か演算子かで決めるようにした。

そして演算の優先順位はありがたく＋,−,×しかないので
まず×の部分を全て探して計算して、残りの＋,−を計算すればいい。
でもこの方法はコーディングをするとき苦労するし、またミスが多くなるのでやめた。

式を表現する方法には演算子の位置によって
演算子が項の間にあって一般的に使う中値記法(infix notation)と
演算子が項の前にある、ポーランド記法とも呼ばれる前値記法(prefix notation)と
演算子が効能白にある、逆ポーランド記法とも呼ばれる後値記法(postfix notation)がある。
前値記法と後値記法の特徴は括弧がないことと演算の優先順位を考えなくても良いことである。
特に後値記法はスタックを使用すると演算の結果が簡単に得られるのでここで使うことにした。

中値記法を後値表記で変換するアルゴリズムでよく知られているのは車両基地アルゴリズムである。
車両基地アルゴリズムは次のように働く。

もし読めるトークンがあったら
１．トークンを読む。
２．もしトークンが数字なら出力キューに入れる。
３．もしトークンが演算子なら演算子スタックに入れるが
　　　トークンの優先順位が演算子スタックの演算子の優先順位以下なら
　　　　演算子スタックの演算子を出力スタックに入れる。
読めるトークンがなくなったら
　演算子スタックの演算子を全て出力スタックに入れる。

車両基地アルゴリズムを用いて作った逆ポーランド記法の式を次のように計算する。

もし出力キューから読めるトークンがあったら
１．出力キューからトークンを読む。
２．もし数字なら演算スタックに入れる
３．もし演算子なら演算スタックに数字が２個ある場合、演算してその結果を演算スタックに入れる。

このような方法によってこの問題は解ける。

ちなみに総１１５通りである。

参考サイト
http://en.wikipedia.org/wiki/Reverse_Polish_notation
http://en.wikipedia.org/wiki/Shunting-yard_algorithm
［自己評価］A
［教えてもらった人の学籍番号、氏名］
